@model LIMS.Application.Responses.InstrumentResponse

@{
    ViewData["Title"] = "Instrument Details";
    var successMessage = TempData["successMessage"]?.ToString();
    var errorMessage = TempData["errorMessage"]?.ToString();
}

<h2>@ViewData["Title"]</h2>
<hr />

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success" role="alert">
        <strong>Success! </strong>@successMessage
        <button type="button" class="btn-close float-end" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        <strong>Error! </strong>@errorMessage
        <button type="button" class="btn-close float-end" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<!-- "Edit Instrument" Button to Make Fields Editable -->
<button id="editInstrumentBtn" class="btn btn-warning">Edit Instrument</button>

<button type="button" class="btn btn-danger" onclick="deleteInstrument(@Model.Id)">Delete</button>

<!-- Form to Show Laboratory -->
<form asp-action="UpdateInstrument" method="post" id="instrumentForm">
    <div class="mb-3">
        <label class="form-label">Id</label>
        <input type="text" class="form-control" asp-for="Id" readonly />
    </div>
    <div class="mb-3">
        <label class="form-label">Name</label>
        <input type="text" class="form-control" asp-for="Name" readonly />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>
    <div class="mb-3">
        <label class="form-label">Manufacturer</label>
        <input type="text" class="form-control" asp-for="Manufacturer" readonly />
        <span asp-validation-for="Manufacturer" class="text-danger"></span>
    </div>
    <div class="mb-3">
        <label class="form-label">Model</label>
        <input type="text" class="form-control" asp-for="Model" readonly />
        <span asp-validation-for="Model" class="text-danger"></span>
    </div>
    <div class="mb-3">
        <label class="form-label">PurchaseDate</label>
        <input type="date" class="form-control" asp-for="PurchaseDate" readonly />
        <span asp-validation-for="PurchaseDate" class="text-danger"></span>
    </div>
    <div class="mb-3">
        <label class="form-label">Expiry Date</label>
        <input type="date" class="form-control" asp-for="ExpiryDate" readonly />
        <span asp-validation-for="ExpiryDate" class="text-danger"></span>
    </div>
    <div class="mb-3">
        <label class="form-label">AdditionalNotes</label>
        <input type="text" class="form-control" asp-for="AdditionalNotes" readonly />
        <span asp-validation-for="AdditionalNotes" class="text-danger"></span>
    </div>
    <div class="mb-3">
        <button type="submit" class="btn btn-primary" id="saveInstrumentBtn" style="display:none;">Save Instrument</button>
    </div>
</form>
<hr />

<script>
    document.getElementById("editInstrumentBtn").addEventListener("click", function () 
    {
        // Make all input fields editable
        document.querySelectorAll("#instrumentForm input").forEach(function (input) 
        {
            if (input.id !== "Id") 
            { // Exclude the "Id" field
                input.removeAttribute("readonly");
            }
        });

        // Show the "Save Instrument" button
        document.getElementById("saveInstrumentBtn").style.display = "inline";

        // Hide the "Edit Instrument" button after enabling editing
        document.getElementById("editInstrumentBtn").style.display = "none";
    });
</script>

<script>
    function deleteInstrument(id) {
        if (confirm("Are you sure you want to delete this instrument?")) {
            fetch(`/Instrument/DeleteInstrument/${id}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() // for anti-forgery token
                }
            })
                .then(response => {
                    if (response.ok) {
                        alert('Instrument deleted successfully!');
                        window.location.href = '/Instrument/GetInstrument/${id}'; // Redirect to the instrument list or wherever needed
                    } else {
                        alert('Error: Could not delete instrument.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error: Could not delete instrument.');
                });
        }
    }
</script>

@* <!-- JavaScript for Authorization Check -->
<script>
    document.getElementById("updateInstrumentBtn").addEventListener("click", function () {
        // Call the Authorization Controller method
        fetch('/Authorization/CheckAuthorization')
            .then(response => response.json())
            .then(data => {
                if (data.isAuthorized) {
                    // Make all input fields editable
                    document.querySelectorAll("#instrumentForm input").forEach(function (input) {
                        input.removeAttribute("readonly");
                    });

                    // Show the Save button
                    document.getElementById("saveInstrumentBtn").style.display = "inline";
                } else {
                    alert("You are not authorized to update this instrument.");
                }
            })
            .catch(error => console.error('Error:', error));
    });
</script> *@